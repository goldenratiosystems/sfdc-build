<?xml version="1.0"?>

<project name="undeploy" xmlns:sf="antlib:com.salesforce">

	<macrodef name="sfRetrieve">
        <attribute name="retrieveTarget"/>
        <attribute name="unpackaged"/>
        <attribute name="maxPoll" default="2000"/>
        <attribute name="pollWaitMillis" default="5000"/>

        <sequential>
            <sf:retrieve
                username="${sf.username}"
                password="${sf.password}"
                serverurl="${sf.server}"
                retrieveTarget="@{retrieveTarget}"
                unpackaged="@{unpackaged}"
                maxPoll="@{maxPoll}"
                pollWaitMillis="@{pollWaitMillis}"
            />
        </sequential>
    </macrodef>

    <macrodef name="sfDeploy">
        <attribute name="zipFile"/>
        <attribute name="maxPoll" default="2000"/>
        <attribute name="pollWaitMillis" default="5000"/>
        <attribute name="purgeOnDelete" default="false"/>
        <attribute name="checkOnly" default="true"/>

        <sequential>
            <sf:deploy
                username="${sf.username}"
                password="${sf.password}"
                serverurl="${sf.server}"
                zipFile="@{zipFile}"
                maxPoll="@{maxPoll}"
                pollWaitMillis="@{pollWaitMillis}"
                rollbackOnError="true"
                singlePackage="true"
                allowMissingFiles="false"
                logType="Detail"
                purgeOnDelete="@{purgeOnDelete}"
                checkOnly="@{checkOnly}"
            />
        </sequential>
    </macrodef>

    <!-- PrePurge Deployments-->

    <!-- Step 1 : Deactivate Flows-->

    <target name="deactivateFlows">
        <deactivateFlows/>
    </target>

    <macrodef name="deactivateFlows">
        <attribute name="type" default="retrieveFlows"/>
        <attribute name="zipFile" default="deactivateFlows.zip"/>
        <attribute name="tempDir" default="temp/prepurge"/>
        <attribute name="apiVersion" default="40.0"/>

        <sequential>
            <delete dir="@{tempDir}/@{type}" failonerror="false"/>
            <mkdir dir="@{tempDir}/@{type}" />
            <mkdir dir="@{tempDir}/@{type}/src" />

            <echoxml file="@{tempDir}/@{type}/src/package.xml" namespacePolicy="all">
                <Package xmlns="http://soap.sforce.com/2006/04/metadata">
                    <types>
                        <members>*</members>
                        <name>Flow</name>
                    </types>
                    <types>
                        <members>*</members>
                        <name>FlowDefinition</name>
                    </types>
                    <version>@{apiVersion}</version>
                </Package>
            </echoxml>

            <sfRetrieve retrieveTarget="@{tempDir}/@{type}/src" unpackaged="@{tempDir}/@{type}/src/package.xml"/>

            <condition property="flowavailable">
                <available file="@{tempDir}/@{type}/src/flowDefinitions" type="dir"/>
            </condition>

            <if>
                <equals arg1="${flowavailable}" arg2="true" />
            <then>
                <!-- set Flow activeVersionNumber as 0-->
                <xmltask toDir="@{tempDir}/@{type}/src/flowDefinitions">
                    <fileset dir="@{tempDir}/@{type}/src/flowDefinitions" includes="*.flowDefinition" />
                    <replace path="//:FlowDefinition/:activeVersionNumber/text()" withText="0"/>
                </xmltask>

                <antcall target="generateDestructiveFlows"/>

                <!-- create meta zip file-->
                <zip destfile="@{tempDir}/@{type}/@{zipFile}" update="true">
                    <fileset dir="@{tempDir}/@{type}/src" includes="package.xml"/>
                    <fileset dir="@{tempDir}/@{type}/src" includes="destructiveChangesPost.xml"/>
                    <fileset dir="@{tempDir}/@{type}/src" includes="flowDefinitions/*.flowDefinition"/>
                </zip>

                <sfDeploy zipFile="@{tempDir}/@{type}/@{zipFile}" checkOnly="false" purgeOnDelete="true"/>

            </then>
            </if>

        </sequential>
    </macrodef>

    <target name="generateDestructiveFlows">
        <property name="dir" value="temp/prepurge/retrieveFlows/src/flows"/>
        <property name="outputFile" value="temp/prepurge/retrieveFlows/src/destructiveChangesPost.xml"/>

        <concat destFile="${outputFile}" append="true"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
            <Package xmlns="http://soap.sforce.com/2006/04/metadata">
                <types>
                <name>Flow</name>
            ]]>
        </concat>

        <for param="file">
            <path>
                <fileset dir="${dir}">
                    <include name="*.flow"/>
                </fileset>
            </path>
            <sequential>
                <local name="filename" />
                <basename property="filename" file="@{file}"/>
                <script language="javascript"><![CDATA[with (new JavaImporter(java.net, java.io)) {
                        arr = project.getProperty('filename').replace('.flow','');
                        print(arr);
                        project.setProperty('filename', arr);
                     }]]>
                 </script>
                <echo append="true" file="${outputFile}"><![CDATA[<members>${filename}</members>${line.separator}]]></echo>
            </sequential>
        </for>

        <concat destFile="${outputFile}" append="true"><![CDATA[
            </types>
            <version>40.0</version>
            </Package>]]>
        </concat>

    </target>


    <!-- Step 2 : Cleanup Metadata -->
    <target name="cleanupMetadata">
        <cleanupMetadata/>
        <deployCleanupMetadata/>
    </target>

    <!-- Create zip file with specific contents and run sf deploy -->
    <macrodef name="deployCleanupMetadata">
        <attribute name="zipFile" default="deployCleanupMetadata.zip"/>
        <attribute name="type" default="cleanupMetadata"/>
        <attribute name="tempDir" default="temp/prepurge"/>
        <sequential>

        <zip destfile="@{tempDir}/@{type}/@{zipFile}" update="true">
            <fileset dir="@{tempDir}/@{type}/src" includes="package.xml"/>
            <fileset dir="@{tempDir}/@{type}/src" includes="flexipages/*.flexipage"/>
            <fileset dir="@{tempDir}/@{type}/src" includes="communityTemplateDefinitions/*.communityTemplateDefinition"/>
            <fileset dir="@{tempDir}/@{type}/src" includes="communityThemeDefinitions/*.communityThemeDefinition"/>
            <fileset dir="@{tempDir}/@{type}/src" includes="objects/*.object"/>
            <fileset dir="@{tempDir}/@{type}/src" includes="sites/*.site"/>
            <fileset dir="@{tempDir}/@{type}/src" includes="pages/SiteHome.page,pages/SiteHome.page-meta.xml"/>
            <fileset dir="@{tempDir}/@{type}/src" includes="aura/**/*.*"/>
            <fileset dir="@{tempDir}/@{type}/src" includes="layouts/*.layout"/>
        </zip>
        <sfDeploy zipFile="@{tempDir}/@{type}/@{zipFile}" checkOnly="false"/>
        </sequential>
    </macrodef>

    <macrodef name="cleanupMetadata">
        <attribute name="type" default="cleanupMetadata"/>
        <attribute name="tempDir" default="temp/prepurge"/>
        <attribute name="apiVersion" default="40.0"/>

        <sequential>
            <mkdir dir="@{tempDir}/@{type}" />
            <mkdir dir="@{tempDir}/@{type}/src" />

            <!-- Grab the metadata below for processing -->
            <echoxml file="@{tempDir}/@{type}/src/package.xml" namespacePolicy="all">
                <Package xmlns="http://soap.sforce.com/2006/04/metadata">
                    <types>
                        <members>*</members>
                        <name>FlexiPage</name>
                    </types>
                    <types>
                        <members>*</members>
                        <name>CommunityTemplateDefinition</name>
                    </types>
                    <types>
                        <members>*</members>
                        <name>CommunityThemeDefinition</name>
                    </types>
                    <types>
                        <name>CustomObject</name>
                        <members>Activity</members>
                        <members>AssistantProgress</members>
                        <members>Campaign</members>
                        <members>CampaignMember</members>
                        <members>Case</members>
                        <members>CaseContactRole</members>
                        <members>Contact</members>
                        <members>ContentVersion</members>
                        <members>Contract</members>
                        <members>ContractContactRole</members>
                        <members>DuplicateRecordItem</members>
                        <members>DuplicateRecordSet</members>
                        <members>EmailMessage</members>
                        <members>Event</members>
                        <members>ExchangeUserMapping</members>
                        <members>FeedItem</members>
                        <members>Lead</members>
                        <members>LinkedArticle</members>
                        <members>Macro</members>
                        <members>MacroAction</members>
                        <members>MacroInstruction</members>
                        <members>Opportunity</members>
                        <members>OpportunityCompetitor</members>
                        <members>OpportunityContactRole</members>
                        <members>OpportunityLineItem</members>
                        <members>Order</members>
                        <members>OrderItem</members>
                        <members>PartnerRole</members>
                        <members>Pricebook2</members>
                        <members>PricebookEntry</members>
                        <members>Product2</members>
                        <members>Site</members>
                        <members>SocialPersona</members>
                        <members>Solution</members>
                        <members>StreamingChannel</members>
                        <members>Task</members>
                        <members>User</members>
                        <members>LiveAgentSession</members>
                        <members>LiveChatTranscript</members>
                        <members>LiveChatTranscriptEvent</members>
                        <members>LiveChatTranscriptSkill</members>
                        <members>LiveChatVisitor</members>
                        <members>*</members>
                    </types>
                    <types>
                        <name>CustomSite</name>
                        <members>*</members>
                     </types>
                    <types>
                        <members>SiteHome</members>
                        <name>ApexPage</name>
                    </types>
                    <types>
                        <members>*</members>
                        <name>CustomApplication</name>
                    </types>
                    <types>
                        <members>*</members>
                        <name>AuraDefinitionBundle</name>
                    </types>
                    <types>
                        <members>*</members>
                        <name>Layout</name>
                    </types>
                    <version>@{apiVersion}</version>
                </Package>
            </echoxml>

            <!-- place in temp folder -->
            <sfRetrieve retrieveTarget="@{tempDir}/@{type}/src" unpackaged="@{tempDir}/@{type}/src/package.xml"/>

            <!-- remove page references from layouts -->
            <xmltask toDir="@{tempDir}/@{type}/src/layouts">
                <fileset dir="@{tempDir}/@{type}/src/layouts" includes="*.layout" />
                <remove path="//:Layout/:layoutSections/:layoutColumns/:layoutItems[:page]"/>
            </xmltask>

            <!-- cleanup Aura components, leave only stubs -->
            <for param="file">
                <path>
                    <fileset dir="temp/prepurge/cleanupMetadata/src/aura">
                        <include name="**/*.cmp"/>
                    </fileset>
                </path>
                <sequential>
                    <local name="filename" />
                    <basename property="filename" file="@{file}"/>
                    <echo file="@{file}"><![CDATA[<aura:component implements="forceCommunity:availableForAllPageTypes" access="global"></aura:component>]]></echo>
                </sequential>
            </for>

            <for param="file">
                <path>
                    <fileset dir="temp/prepurge/cleanupMetadata/src/aura">
                        <include name="**/*.design"/>
                    </fileset>
                </path>
                <sequential>
                    <local name="filename" />
                    <basename property="filename" file="@{file}"/>
                    <echo file="@{file}"><![CDATA[<design:component></design:component>]]></echo>
                </sequential>
            </for>

            <for param="file">
                <path>
                    <fileset dir="temp/prepurge/cleanupMetadata/src/aura">
                        <include name="**/*.js"/>
                    </fileset>
                </path>
                <sequential>
                    <local name="filename" />
                    <basename property="filename" file="@{file}"/>
                    <echo file="@{file}"><![CDATA[({})]]></echo>
                </sequential>
            </for>

            <for param="file">
                <path>
                    <fileset dir="temp/prepurge/cleanupMetadata/src/aura">
                        <include name="**/*.css"/>
                    </fileset>
                </path>
                <sequential>
                    <local name="filename" />
                    <basename property="filename" file="@{file}"/>
                    <echo file="@{file}"><![CDATA[ .THIS {} ]]></echo>
                </sequential>
            </for>

            <for param="file">
                <path>
                    <fileset dir="temp/prepurge/cleanupMetadata/src/aura">
                        <include name="**/*.auradoc"/>
                    </fileset>
                </path>
                <sequential>
                    <local name="filename" />
                    <basename property="filename" file="@{file}"/>
                    <echo file="@{file}"><![CDATA[<aura:documentation><aura:description></aura:description></aura:documentation>]]></echo>
                </sequential>
            </for>

            <!-- remove custom tabs from Applications -->
            <xmltask toDir="@{tempDir}/@{type}/src/applications">
                <fileset dir="@{tempDir}/@{type}/src/applications" includes="*.app" />
                <remove path="//:CustomApplication/:tab[text()[contains(., '__c')]]"/>
                <remove path="//:CustomApplication/:tab[text()[not(contains(., 'standard-'))]]"/>
                <remove path="//:CustomApplication/:workspaceMappings/:mapping[:tab/text()[not(contains(., 'standard-'))]]"/>
            </xmltask>

            <!-- cleanup Custom Sites -->
            <replaceregexp flags="gs">
                <fileset dir="@{tempDir}/@{type}/src/sites/" includes="*.site" />

                <!-- remove references from Site URLRewriters and VF pages, e.g. selfReg, login pages, etc.
                    Leave only stub metadata -->
                <regexp pattern="&lt;CustomSite xmlns=&quot;http://soap.sforce.com/2006/04/metadata&quot;&gt;.*&lt;active&gt;([^&lt;]+)&lt;/active&gt;.*&lt;allowStandardPortalPages&gt;([^&lt;]+)&lt;/allowStandardPortalPages&gt;.*&lt;clickjackProtectionLevel&gt;([^&lt;]+)&lt;/clickjackProtectionLevel&gt;.*&lt;indexPage&gt;([^&lt;]+)&lt;/indexPage&gt;.*&lt;masterLabel&gt;([^&lt;]+)&lt;/masterLabel&gt;.*&lt;requireHttps&gt;([^&lt;]+)&lt;/requireHttps&gt;.*&lt;siteType&gt;([^&lt;]+)&lt;/siteType&gt;.*&lt;subdomain&gt;([^&lt;]+)&lt;/subdomain&gt;.*.*&lt;urlPathPrefix&gt;([^&lt;]+)&lt;/urlPathPrefix&gt;.*&lt;/CustomSite&gt;" />
                <substitution expression="&lt;CustomSite xmlns=&quot;http://soap.sforce.com/2006/04/metadata&quot;&gt;${line.separator}&lt;active&gt;\1&lt;/active&gt;${line.separator}&lt;allowStandardPortalPages&gt;\2&lt;/allowStandardPortalPages&gt;${line.separator}&lt;clickjackProtectionLevel&gt;\3&lt;/clickjackProtectionLevel&gt;${line.separator}&lt;indexPage&gt;SiteHome&lt;/indexPage&gt;${line.separator}&lt;masterLabel&gt;\5&lt;/masterLabel&gt;${line.separator}&lt;requireHttps&gt;\6&lt;/requireHttps&gt;${line.separator}&lt;siteType&gt;\7&lt;/siteType&gt;${line.separator}&lt;subdomain&gt;\8&lt;/subdomain&gt;${line.separator}&lt;urlPathPrefix&gt;\9&lt;/urlPathPrefix&gt;${line.separator}&lt;/CustomSite&gt;" />
            </replaceregexp>

            <xmltask toDir="@{tempDir}/@{type}/src/sites">
                <fileset dir="@{tempDir}/@{type}/src/sites" includes="*.site" />
                <remove path="//:CustomSite/:allowHomePage"/>
                <remove path="//:CustomSite/:allowStandardAnswersPages"/>
                <remove path="//:CustomSite/:allowStandardIdeasPages"/>
                <remove path="//:CustomSite/:allowStandardLookups"/>
                <remove path="//:CustomSite/:allowStandardSearch"/>
                <remove path="//:CustomSite/:authorizationRequiredPage"/>
                <remove path="//:CustomSite/:bandwidthExceededPage"/>
                <remove path="//:CustomSite/:customWebAddresses"/>
                <remove path="//:CustomSite/:fileNotFoundPage"/>
                <remove path="//:CustomSite/:genericErrorPage"/>
                <remove path="//:CustomSite/:inMaintenancePage"/>
                <remove path="//:CustomSite/:requireInsecurePortalAccess"/>
                <remove path="//:CustomSite/:siteAdmin"/>
                <replace path="//:CustomSite/:indexPage/text()" withText="SiteHome"/>
            </xmltask>

            <!-- create stub apex page for custom sites -->
            <script language="javascript">with (new JavaImporter(java.io)) {
                if ('${NumberOfSites.tmp}') {
                    var page = project.createTask('echo');
                    page.setFile(new File('@{tempDir}/@{type}/src/pages/SiteHome.page'));
                    page.setMessage('&lt;apex:page/&gt;');
                    page.perform();
                    var meta = project.createTask('echo');
                    meta.setFile(new File('@{tempDir}/@{type}/src/pages/SiteHome.page-meta.xml'));
                    meta.setMessage('&lt;ApexPage&gt;&lt;label&gt;SiteHome&lt;/label&gt;&lt;/ApexPage&gt;');
                    meta.perform();
                }
            }</script>

            <!-- cleanup Flexipages-->
            <xmltask toDir="@{tempDir}/@{type}/src/flexipages">
                <fileset dir="@{tempDir}/@{type}/src/flexipages" includes="*.flexipage" />
                <remove path="//:FlexiPage/:flexiPageRegions/:componentInstances"/>
                <remove path="//:FlexiPage/:flexiPageRegions[:type='Facet']"/>
                <remove path="//:FlexiPage/:parentFlexiPage"/>
                <remove path="//:FlexiPage/:flexiPageRegions/:mode[text()='Replace']"/>
            </xmltask>

            <!-- Community Template and Theme -->
            <xmltask toDir="@{tempDir}/@{type}/src/communityTemplateDefinitions">
                <fileset dir="@{tempDir}/@{type}/src/communityTemplateDefinitions" includes="*.communityTemplateDefinition" />
                <remove path="//:CommunityTemplateDefinition/:pageSetting"/>
            </xmltask>

            <xmltask toDir="@{tempDir}/@{type}/src/communityThemeDefinitions">
                <fileset dir="@{tempDir}/@{type}/src/communityThemeDefinitions" includes="*.communityThemeDefinition" />
                <remove path="//:CommunityThemeDefinition/:themeSetting[:themeLayoutType/text() != 'Login']"/>
            </xmltask>

            <!-- Cleanup Formula Fields, lookupFilter, WebLinks, SerachLayouts -->
            <xmltask toDir="@{tempDir}/@{type}/src/objects">
                <fileset dir="@{tempDir}/@{type}/src/objects" includes="*.object" />
                <replace path="//:CustomObject/:searchLayouts">
                <![CDATA[
                 <searchLayouts/>
                ]]></replace>

                <remove path="//:CustomObject/:actionOverrides[:type/text() != 'Default']/:comment"/>
                <remove path="//:CustomObject/:actionOverrides[:type/text() != 'Default']/:content"/>
                <remove path="//:CustomObject/:actionOverrides[:type/text() != 'Default']/:formFactor"/>
                <remove path="//:CustomObject/:actionOverrides[:type/text() != 'Default']/:pageOrSobjectType"/>
                <remove path="//:CustomObject/:actionOverrides[:type/text() != 'Default']/:skipRecordTypeSelect"/>
                <replace path="//:CustomObject/:actionOverrides[:type/text() != 'Default']/:type/text()" withText="Default"/>

                <remove path="//:CustomObject/:actionOverrides[:type/text() = 'Default' and :actionName/text() = 'View'][position()&gt;1]"/>
            </xmltask>

            <!-- weblinks -->
            <replaceregexp flags="gm"
                match="&lt;webLinks&gt;[\s\S]*?&lt;\/webLinks&gt;"
                replace="&lt;!--\0--&gt;">
                <fileset dir="@{tempDir}/@{type}/src/objects/">
                    <include name="*.object"/>
                </fileset>
            </replaceregexp>

            <!-- for lookup filters -->
            <replaceregexp flags="gm"
                match="&lt;lookupFilter&gt;[\s\S]*?&lt;\/lookupFilter&gt;"
                replace="&lt;!--\0--&gt;">
                <fileset dir="@{tempDir}/@{type}/src/objects/">
                    <include name="*.object"/>
                </fileset>
            </replaceregexp>

            <!-- default to false on checkbox values  -->
            <replaceFormulaField
                dir="@{tempDir}/@{type}/src/objects/"
                files="*.object"
                type="Checkbox"
                value="false"
                />

            <!-- set number formulas to 0  -->
            <replaceFormulaField
                dir="@{tempDir}/@{type}/src/objects/"
                files="*.object"
                type="Number"
                value="0"
                />

            <!-- set text formulas to blank  -->
            <replaceFormulaField
                dir="@{tempDir}/@{type}/src/objects/"
                files="*.object"
                type="Text"
                value="''"
                />
        </sequential>
    </macrodef>

    <macrodef name="replaceFormulaField">
        <attribute name="dir" />
        <attribute name="files" />
        <attribute name="type" />
        <attribute name="value" />
        <sequential>
            <echo>Cleanup formula fields - @{type}</echo>
            <xmltask toDir="@{dir}">
                <fileset dir="@{dir}" includes="@{files}" />

                <replace path="//:CustomObject/:fields[:type='@{type}' and :formula]/:formula/text()" withText="@{value}"/>
                <remove path="//:CustomObject/:fields[:type='@{type}' and :formula]/:formulaTreatBlanksAs"/>
            </xmltask>
        </sequential>
    </macrodef>

    <macrodef name="destroy">

        <attribute name="username" />
        <attribute name="password" />
        <attribute name="serverurl" default="https://test.salesforce.com" />
        <attribute name="tempDir" default="temp/destroy" description="Directory to write metadata." />
        <attribute name="apiVersion" default="40.0" />

        <sequential>

            <!-- prompt user to confirm
            <input message="THIS TASK IRREVERSIBLY DESTROYS ALL METADATA. ARE YOU SURE?" validargs="@{serverurl}/?un=@{username}" />-->
            <echo>Obtaining sfdc session...</echo>
            <!-- http api helper -->
            <macrodef name="soapcall">
                <text name="request" />
                <attribute name="endpoint" />
                <attribute name="tempfile" default="" />
                <attribute name="soapaction" default="&quot;&quot;" />
                <sequential>
                    <local name="request" />
                    <property name="request" value="@{request}" />
                    <script language="javascript">with (new JavaImporter(java.net, java.io)) {
                        var line, result = '', connection = new URL('@{endpoint}').openConnection();
                        connection.setDoOutput(true);
                        connection.setRequestMethod('POST');
                        connection.setRequestProperty('Content-Type', 'text/xml');
                        connection.setRequestProperty('SOAPAction', '@{soapaction}');
                        var writer = new OutputStreamWriter(connection.getOutputStream());
                        writer.write(project.getProperty('request')); writer.flush(); //request
                        var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        while ((line = reader.readLine()) != null) result += line + '\n'; reader.close(); //response
                        var echo = project.createTask('echo');
                        if ('@{tempfile}') echo.setFile(new File('@{tempfile}'));
                        echo.setMessage(result);
                        echo.perform();
                    }</script>
                </sequential>
            </macrodef>

            <!-- http soap login -->
            <local name="loginResponse.tmp" />
            <tempfile property="loginResponse.tmp" prefix="loginResponse" suffix=".tmp" createfile="true" deleteonexit="true" />
            <soapcall tempfile="${loginResponse.tmp}" endpoint="@{serverurl}/services/Soap/u/@{apiVersion}" soapaction="login"><![CDATA[
                <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">
                    <Body>
                        <login xmlns="urn:partner.soap.sforce.com">
                            <username>@{username}</username>
                            <password>@{password}</password>
                        </login>
                    </Body>
                </Envelope>
            ]]></soapcall>

            <!-- parse endpoint -->
            <local name="${loginUrl}" />
            <loadfile property="loginUrl" srcFile="${loginResponse.tmp}">
                <filterchain><tokenfilter><filetokenizer/><replaceregex flags="gs" pattern=".*(https://[^/]+).*" replace="\1" /></tokenfilter></filterchain>
            </loadfile>

            <!-- parse session -->
            <local name="${sessionId}" />
            <loadfile property="sessionId" srcFile="${loginResponse.tmp}">
                <filterchain><tokenfilter><filetokenizer/><replaceregex flags="gs" pattern=".*&lt;sessionId&gt;([^&lt;]+)&lt;/sessionId&gt;.*" replace="\1" /></tokenfilter></filterchain>
            </loadfile>
            <echo>Session Id Received!</echo>


            <!-- reset working directory -->
            <delete dir="@{tempDir}" />
            <mkdir dir="@{tempDir}" />

            <!-- determines org shape -->
            <echo>Determining org shape...</echo>
            <local name="describeMetadataResult.tmp" />
            <tempfile property="describeMetadataResult.tmp" prefix="describeMetadataResult" suffix=".tmp" createfile="true" deleteonexit="true" />
            <sf:describeMetadata serverurl="${loginUrl}" sessionid="${sessionId}" resultFilePath="${describeMetadataResult.tmp}" />

            <echo>Removing metadata descriptions...</echo>
            <!-- clean metadata descriptions to make it easier for regex processing later -->
            <local name="metadataTypes.tmp" />
            <tempfile property="metadataTypes.tmp" prefix="metadataTypes" suffix=".tmp" createfile="true" deleteonexit="true" />
            <concat destFile="${metadataTypes.tmp}">
                <fileset file="${describeMetadataResult.tmp}" />
                <filterchain>
                    <linecontainsregexp><regexp pattern="ChildObjects|XMLName" /></linecontainsregexp>
                    <tokenfilter><replacestring from="," to="${line.separator}"/></tokenfilter>
                    <tokenfilter><replacestring from="ChildObjects: " to=""/></tokenfilter>
                    <tokenfilter><replacestring from="XMLName: " to=""/></tokenfilter>
                    <tokenfilter><replacestring from="*" to=""/></tokenfilter>
                    <tokenfilter><ignoreblank/></tokenfilter>
                    <sortfilter/>
                </filterchain>
            </concat>

            <!-- lists by type with regex filter -->
            <macrodef name="listMetadataForDestroy">
                <attribute name="negate" />
                <attribute name="pattern" />
                <attribute name="metadataType" />
                <sequential>
                    <echo>Preparing destructiveChangesPost.xml - @{metadataType}</echo>
                    <local name="listMetadataResult.tmp" />
                    <tempfile property="listMetadataResult.tmp" prefix="@{metadataType}" suffix=".tmp" createfile="true" deleteonexit="true" />

                    <if>
                     <equals arg1="@{metadataType}" arg2="EmailTemplate" />
                     <then>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder1.tmp" folder="Chat_Team"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder2.tmp" folder="Client_Delivery"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder3.tmp" folder="Marketing_Template"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder4.tmp" folder="Military_Wellness_Initiative"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder5.tmp" folder="RUSH_Tier_1_Choice"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder6.tmp" folder="RUSH_Tier_1_archive"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder7.tmp" folder="RUSH_Tier_2"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder8.tmp" folder="Registration"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder9.tmp" folder="Rewards"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder10.tmp" folder="Sales_Team_Emails"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder11.tmp" folder="Site_Support"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder12.tmp" folder="Syncing"/>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="folder13.tmp" folder="unfiled$public"/>

                       <concat destFile="${listMetadataResult.tmp}" append="true">
                            <fileset file="folder*.tmp" />

                            <filterchain>
                                <scriptfilter language="javascript">
                                    var line = self.getToken();

                                    //Standard Emails

                                    if (line.indexOf("RejectionEmail") != -1) {
                                        self.setToken(null);
                                    }
                                    if (line.indexOf("CommunityWelcomeEmailTemplate") != -1) {
                                        self.setToken(null);
                                    }
                                    if (line.indexOf("UpdateConnEmail") != -1) {
                                        self.setToken(null);
                                    }
                                    if (line.indexOf("UpdateConnEmail") != -1) {
                                        self.setToken(null);
                                    }
                                    if (line.indexOf("DeactivationEmail") != -1) {
                                        self.setToken(null);
                                    }
                                    if (line.indexOf("CommunityForgotPasswordEmailTemplate") != -1) {
                                        self.setToken(null);
                                    }
                                    if (line.indexOf("CommunityChangePasswordEmailTemplate") != -1) {
                                        self.setToken(null);
                                    }
                                    if (line.indexOf("InvitationEmail") != -1) {
                                        self.setToken(null);
                                    }
                                    if (line.indexOf("AcceptanceEmail") != -1) {
                                        self.setToken(null);
                                    }
                                </scriptfilter>
                            </filterchain>
                       </concat>

                     </then>
                     <else>
                       <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="@{metadataType}" resultFilePath="${listMetadataResult.tmp}" />
                     </else>
                    </if>

                    <concat destFile="@{tempDir}/destructiveChangesPost.xml" append="true">
                        <fileset file="${listMetadataResult.tmp}" />
                        <header filtering="false"><![CDATA[${line.separator}<types>${line.separator}    <name>@{metadataType}</name>${line.separator}]]></header>
                        <filterchain>
                            <scriptfilter language="javascript">
                                var line = self.getToken();

                                if (line.indexOf("LiveChatTranscriptWaiting-Live") != -1) {
                                    self.setToken(null);
                                }
                                if (line.indexOf("LiveChatTranscriptActive-Live") != -1) {
                                    self.setToken(null);
                                }
                            </scriptfilter>
                            <linecontains><contains value="FullName/Id" /></linecontains>
                            <replaceregex pattern="FullName/Id: (.+)/.*" replace="&lt;members&gt;\1&lt;/members&gt;" />
                            <linecontainsregexp negate="@{negate}"><regexp pattern="@{pattern}" /></linecontainsregexp>
                        </filterchain>
                        <footer filtering="false"><![CDATA[</types>]]></footer>
                    </concat>
                </sequential>
            </macrodef>

            <!-- open destructive changes definition -->
            <echo file="@{tempDir}/destructiveChangesPost.xml"><![CDATA[<Package xmlns="http://soap.sforce.com/2006/04/metadata">]]></echo>

            <!-- iterates over (most) metadata types -->
            <loadfile property="" srcFile="${metadataTypes.tmp}">
                <filterchain>
                    <!-- AppMenu - AppSwitcher.appmenu - Error: The AppMenu called 'AppSwitcher' is standard and cannot be deleted -->
                    <!-- AssignmentRules - Case.assignmentRules - Error: The AssignmentRules called 'Case' is standard and cannot be deleted -->
                    <!-- AutoResponseRules - Lead.autoResponseRules - Error: The AutoResponseRules called 'Lead' is standard and cannot be deleted -->
                    <!-- Certificate - SelfSignedCert.crt - Error: We can't delete this certificate because your Identity Provider is using it -->
                    <!-- CleanDataService - DataCloudCompanyMatch - Error: You can't delete default data integration rule -->
                    <!-- Community - Zone.community - Error: invalid parameter value -->
                    <!-- CustomSite - BigAss.site - Error: insufficient access rights on cross-reference id -->
                    <!-- CustomObjectTranslation - MyMeta__mdt-en_US - Error: The CustomObjectTranslation called 'MyMeta__mdt-en_US' is standard and cannot be deleted -->
                    <!-- EscalationRules - Case.escalationRules: - Error: The EscalationRules called 'Case' is standard and cannot be deleted -->
                    <!-- Flow - TaskNotify.flowDefinition - Error: insufficient access rights on cross-reference id -->
                    <!-- InstalledPackage - Error: cannot modify managed object: state=installed -->
                    <!-- MatchingRules - Account.matchingRule: - Error: Matching Rules have to be deleted individually -->
                    <!-- RecordType - Metric.Completion - Error: Cannot delete record type through API -->
                    <!-- SharingRules - Account.sharingRules - Error: The SharingRules called 'Account' is standard and cannot be deleted -->
                    <!-- Workflow - Account.workflow - Error: Cannot delete a workflow object; Workflow Rules and Actions must be deleted individually -->
                    <linecontainsregexp negate="true">
                        <regexp pattern="AppMenu|AssignmentRules|AutoResponseRules|Certificate|CleanDataService|Community$|CustomSite|CustomObjectTranslation|EscalationRules|InstalledPackage|MatchingRules|RecordType|SharingRules|ManagedTopic|LiveChatButton|Skill|Network|SiteDotCom|PermissionSet|LiveChatDeployment|FlowDefinition|Workflow$|BusinessProcess|Role|Queue|CommunityTemplateDefinition|CommunityThemeDefinition|CustomApplication|CustomApplicationComponent|AuraDefinitionBundle" />
                    </linecontainsregexp>

                    <!-- Layout - Remove only: Account-Account %28Marketing%29 and WorkFeedback-Feedback Layout - Summer %2715 etc -->
                    <!-- Profile - Remove only: Custom: Marketing Profile and Custom: Support Profile and Custom: Sales Profile etc -->
                    <!-- ListView - Leaves behind: Activity.All, Asset.All, Campaign.All, Contract.All, Product2.All, User.All etc -->
                    <!-- CustomField - Leaves behind: BigObject Customer_Interaction__b.Score_This_Game__c etc -->
                    <!-- MatchingRule - Leaves behind: Lead.Standard_Lead_Match_Rule_v1_0 and Account.Standard_Account_Match_Rule_v1_0 etc -->
                    <!-- CustomObject - Remove only: Big Objects, Custom Objects, Platform Events, External Objects etc -->
                    <!-- BusinessProcess - Leaves behind: Case.master etc -->
                    <!-- CustomApplication - Leaves behind: standard__AppLauncher etc -->
                    <scriptfilter language="javascript">
                        var negate = false, pattern = '.*', metadataType = self.getToken();
                        if ('Layout' == metadataType) (negate = false) | (pattern = '%27|%28|%29');
                        if ('Profile' == metadataType) (negate = false) | (pattern = 'Custom%3A');
                        if ('ListView' == metadataType) (negate = true) | (pattern = '\\.All&lt;/members&gt;');
                        if ('CustomField' == metadataType) (negate = true) | (pattern = '__b\\.');
                        if ('MatchingRule' == metadataType) (negate = true) | (pattern = 'Standard_');
                        if ('CustomObject' == metadataType) (negate = false) | (pattern = '__b|__c|__e|__x|__mdt');
                        if ('BusinessProcess' == metadataType) (negate = true) | (pattern = 'master');
                        //if ('CustomApplication' == metadataType) (negate = true) | (pattern = 'standard__');
                        var macro = project.createTask('listMetadataForDestroy');
                        macro.setDynamicAttribute('negate', negate);
                        macro.setDynamicAttribute('pattern', pattern);
                        macro.setDynamicAttribute('metadatatype', metadataType);
                        macro.execute(); //dynamic attributes are lowercase insistent
                    </scriptfilter>
                </filterchain>
            </loadfile>

            <!-- close destructive changes definition -->
            <echo append="true" file="@{tempDir}/destructiveChangesPost.xml"><![CDATA[</Package>]]></echo>

            <!-- retrieves by type and regex replaces -->
            <macrodef name="bulkRetrieveForDestroy">
                <attribute name="metadataType" />
                <attribute name="directoryName" />
                <attribute name="pattern" />
                <attribute name="expression" />
                <sequential>
                    <echo>Preparing package.xml - @{metadataType}</echo>
                    <mkdir dir="@{tempDir}/@{directoryName}" />
                    <sf:bulkRetrieve serverurl="${loginUrl}" sessionid="${sessionId}" retrieveTarget="@{tempDir}" metadataType="@{metadataType}" batchSize="10000" />
                    <replaceregexp flags="gs">
                        <fileset dir="@{tempDir}/@{directoryName}" />
                        <regexp pattern="@{pattern}" />
                        <substitution expression="@{expression}" />
                    </replaceregexp>
                </sequential>
            </macrodef>

            <!-- fix layout custom links - Error: This WebLink is referenced elsewhere in salesforce.com -->
            <echo>Removing layout custom links...</echo>
            <bulkRetrieveForDestroy
                metadataType="Layout"
                directoryName="layouts"
                pattern="&lt;layoutItems&gt;\s+&lt;customLink&gt;[^&lt;]+&lt;/customLink&gt;\s+&lt;/layoutItems&gt;"
                expression="&lt;!--\0--&gt;"
            />

            <!-- fix layout custom buttons - Error: This WebLink is referenced elsewhere in salesforce.com - Order-Order Layout -->
            <echo>Removing layout custom buttons...</echo>
            <replaceregexp flags="gs">
                <fileset dir="@{tempDir}/layouts" />
                <regexp pattern="&lt;customButtons&gt;[^&lt;]+&lt;/customButtons&gt;" />
                <substitution expression="&lt;!--\0--&gt;" />
            </replaceregexp>

            <!-- fix profile default apps - Error: Unable to delete custom app. Profiles are using this custom app as default -->
            <echo>Removing default apps from profiles...</echo>
            <bulkRetrieveForDestroy
                metadataType="Profile"
                directoryName="profiles"
                pattern="&lt;userPermissions&gt;.*&lt;/userPermissions&gt;"
                expression="&lt;applicationVisibilities&gt;&lt;application&gt;standard__AppLauncher&lt;/application&gt;&lt;default&gt;true&lt;/default&gt;&lt;visible&gt;true&lt;/visible&gt;&lt;/applicationVisibilities&gt;"
            />

            <!-- fix role parents - Error: Your attempt to delete the role could not be completed because at least one role reports to that role -->
            <echo>Removing roles...</echo>
            <bulkRetrieveForDestroy
                metadataType="Role"
                directoryName="roles"
                pattern="&lt;parentRole&gt;(?!System_Administrator|ignoremeN)[^&lt;]+&lt;/parentRole&gt;"
                expression="&lt;!--\0--&gt;"
            />

            <!-- fix object listviews - Error: cannot delete last filter -->
            <echo>Stubbing list views...</echo>
            <bulkRetrieveForDestroy
                metadataType="ListView"
                directoryName="objects"
                pattern="&lt;listViews&gt;.*&lt;/listViews&gt;"
                expression="&lt;listViews&gt;&lt;fullName&gt;All&lt;/fullName&gt;&lt;filterScope&gt;Everything&lt;/filterScope&gt;&lt;label&gt;All&lt;/label&gt;&lt;/listViews&gt;&lt;searchLayouts/&gt;"
            />

            <!-- fix support setting queue dependencies - Error: cannot delete queue that is in use -->
            <echo>Changing default case owner...</echo>
            <mkdir dir="@{tempDir}/settings" />
            <echoxml file="@{tempDir}/settings/Case.settings" namespacePolicy="all">
                <CaseSettings xmlns="http://soap.sforce.com/2006/04/metadata">
                    <defaultCaseOwner>@{username}</defaultCaseOwner>
                    <defaultCaseOwnerType>User</defaultCaseOwnerType>
                </CaseSettings>
            </echoxml>

            <!-- fix big objects - Error: Custom BigObjects do not support layouts -->
            <echo>Removing big objects...</echo>
            <delete><fileset dir="@{tempDir}" includes="**/*__b*" /></delete>

            <!-- MANUAL COMPONENTS -->
            <!-- CustomSite URL Rewriter is not available through Metadata API -->
            <!-- Inbound Email Services are not available through Metadata API -->
            <!-- Lead Settings behaviour is not available through Metadata API -->

            <!-- strips namespaced components -->
            <macrodef name="unspecifyForDestroy">
                <attribute name="namespacePrefix" />
                <sequential>
                    <echo>Stripping namespaced components: @{namespacePrefix}</echo>
                    <replaceregexp
                        flags="gm"
                        file="@{tempDir}/destructiveChangesPost.xml"
                        match="&lt;members&gt;[^&lt;]*@{namespacePrefix}__[^&lt;]+&lt;/members&gt;"
                        replace="&lt;!--\0--&gt;"
                    />
                    <delete><fileset dir="@{tempDir}" includes="**/@{namespacePrefix}__*" /></delete>
                </sequential>
            </macrodef>

            <!-- iterates over all namespace prefixes -->
            <echo>Listing installed packages...</echo>
            <local name="InstalledPackage.tmp" />
            <tempfile property="InstalledPackage.tmp" prefix="InstalledPackage" suffix=".tmp" createfile="true" deleteonexit="true" />
            <sf:listMetadata serverurl="${loginUrl}" sessionid="${sessionId}" metadataType="InstalledPackage" resultFilePath="${InstalledPackage.tmp}" />
            <loadfile property="" srcFile="${InstalledPackage.tmp}">
                <filterchain>
                    <linecontains><contains value="FullName/Id" /></linecontains>
                    <replaceregex pattern="FullName/Id: (.+)/.*" replace="\1" />
                    <sortfilter />
                    <uniqfilter />
                    <scriptfilter language="javascript">
                        var macro = project.createTask('unspecifyForDestroy');
                        macro.setDynamicAttribute('namespaceprefix', self.getToken());
                        macro.execute(); //dynamic attributes are lowercase insistent
                    </scriptfilter>
                </filterchain>
            </loadfile>

            <!-- Unsuported Metadata references
                Flexipages references
                CustomSite stub page -->

            <xmltask toDir="@{tempDir}/">
                <fileset file="@{tempDir}/destructiveChangesPost.xml" />
                <remove path="//:Package/:types/:members[text() = 'CC_UrlRewriter']"/>
                <remove path="//:Package/:types/:members[text() = 'ClientDeliveryApprovalClass']"/>
                <remove path="//:Package/:types/:members[text() = 'Support_Help_Center_kokua_themeLayout_login']"/>
                <remove path="//:Package/:types/:members[text() = 'Account_Management_Home_Page']"/>
                <remove path="//:Package/:types/:members[text() = 'Sales_Opportunity_Lightning_Page']"/>
                <remove path="//:Package/:types/:members[text() = 'SiteHome']"/>
                <remove path="//:Package/:types/:members[text() = 'CollaborationGroup.NewGroupRecord']"/>
                <remove path="//:Package/:types/:members[text() = 'CollaborationGroup.NewGroupMember']"/>
                <remove path="//:Package/:types/:members[text() = 'siteAsset_3740c5488bb14240a49063e97deae226']"/>
            </xmltask>

            <!-- create package definition for fixes -->
            <echo>Creating package definition for fixes...</echo>
            <echoxml file="@{tempDir}/package.xml" namespacePolicy="all">
                <Package xmlns="http://soap.sforce.com/2006/04/metadata">
                    <version>40.0</version>
                    <types>
                        <name>ApexPage</name>
                        <members>*</members>
                    </types>
                    <types>
                        <name>Layout</name>
                        <members>*</members>
                    </types>
                    <types>
                        <name>ListView</name>
                        <members>*</members>
                    </types>
                    <types>
                        <name>Profile</name>
                        <members>*</members>
                    </types>
                    <types>
                        <name>Role</name>
                        <members>*</members>
                    </types>
                    <types>
                        <name>Settings</name>
                        <members>*</members>
                    </types>
                </Package>
            </echoxml>

            <!--destroy -->
            <echo>Running destroy...</echo>
            <sf:deploy
                serverurl="${loginUrl}"
                sessionid="${sessionId}"
                deployRoot="@{tempDir}"
                ignoreWarnings="true"
                singlePackage="true"
                purgeOnDelete="true"
                checkOnly="false"
            />

        </sequential>

    </macrodef>

</project>
